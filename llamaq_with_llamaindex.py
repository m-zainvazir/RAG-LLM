# -*- coding: utf-8 -*-
"""Llamaq with llamaindex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WKk8wnbxqBkX7Z-USlYLtFbaHIGhZqOQ
"""

# Commented out IPython magic to ensure Python compatibility.
#!pip install pypdf
#!pip install langchain transformers einops accelerate bitsandbytes
#!pip install sentence_transformers
#!pip install llama_index

from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, ServiceContext
from llama_index.llms.huggingface import HuggingFaceLLM
from llama_index.core.prompts.prompts import SimpleInputPrompt

# Commented out IPython magic to ensure Python compatibility.
#!pip install langchain-community


documents = SimpleDirectoryReader("/content/data").load_data()

documents

system_prompt="""
You are a Q&A assistant. Your goal is to answer questions as accurately as possible based on the instructions and context provided.
"""

#Default format supportable
query_wrapper_prompt = SimpleInputPrompt("<|USER|>{query_str}<|ASSISTANT|>")

from huggingface_hub import login
login(token="hf_XXXXXX")  

import torch

llm= HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs={"temperature": 0.0, "do_sample": False},
    system_prompt=system_prompt,
    query_wrapper_prompt=query_wrapper_prompt,
    tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
    model_name="meta-llama/Llama-2-7b-chat-hf",
    device_map="auto",
    model_kwargs={"torch_dtype": torch.float16, "load_in_8bit": True}
)

from langchain_community.embeddings import HuggingFaceEmbeddings
from llama_index.core import ServiceContext
#from llama_index.legacy.embeddings.langchain import LangchainEmbedding
#from llama_index.embeddings import LangchainEmbedding

embed_model = HuggingFaceEmbeddings(model_name="all-mpnet-base-v2")

from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model=embed_model
Settings.chunk_size=1024

index = VectorStoreIndex.from_documents(documents, llm = llm, embed_model=embed_model, chunk_size=1024)

query_engine = index.as_query_engine()

response = query_engine.query("What is the attention you need?")

print(response)

mzresume = documents[0]

index2 = VectorStoreIndex.from_documents([mzresume], llm = llm, embed_model=embed_model, chunk_size=1024)
query_engine = index2.as_query_engine()

response2 = query_engine.query("Suggest some unique and interesting projects I could add to my resume for an outstanding AI Engineer")
print(response2)

